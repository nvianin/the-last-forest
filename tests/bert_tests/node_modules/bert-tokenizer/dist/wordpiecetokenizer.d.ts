declare type Child = {
    [key: string]: TrieNode;
};
declare class TrieNode {
    key: string;
    parent: TrieNode;
    children: Child;
    end: boolean;
    score: number;
    index: number;
    constructor(key: string);
    getWord(): (number | string[])[];
}
declare class Trie {
    root: TrieNode;
    constructor();
    insert(word: string, score: number, index: number): void;
    find(ss: string): TrieNode;
}
export default class WordPieceTokenizer {
    separator: string;
    UNK_INDEX: number;
    trie: Trie;
    vocab: string[];
    constructor();
    load(vocabUrl: string): void;
    loadVocab(vocabUrl: string): any;
    processInput(text: string): string[];
    tokenize(text: string): number[];
}
export {};
